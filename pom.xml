<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <!--  自动生成的部分  -->
  <modelVersion>4.0.0</modelVersion>
  <groupId>com</groupId>
  <artifactId>mmall</artifactId>
  <!--  打包打成war包 -->
  <packaging>war</packaging>
  <!--  1.0的快照版  -->
  <version>1.0-SNAPSHOT</version>
  <name>mmall Maven Webapp</name>
  <url>http://maven.apache.org</url>





  <!--  pom里面的配置   -->
  <properties>
<!--   字符集utf-8 -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <!--  maven  编译字符集   -->
    <maven.compiler.encoding>UTF-8</maven.compiler.encoding>

    <!--   定义变量后面直接引用就好了  -->
    <!--  org.springframework.version  这个是自定义的能看懂即可   下面这3个都是自定义的     -->
    <org.springframework.version>5.3.18</org.springframework.version>
    <!--   mybatis的版本  -->
    <org.mybatis.version>3.4.1</org.mybatis.version>
    <!--  mybatis 和spring集成要用到的jar包   -->
    <org.mybatis.spring.version>1.3.0</org.mybatis.spring.version>
  </properties>


  <!--  dependencies 项目的主要配置     -->
  <dependencies>

    <!--  servlet的jar包  -->
    <dependency>
      <groupId>org.apache.tomcat</groupId>
      <artifactId>tomcat-servlet-api</artifactId>
      <version>7.0.64</version>
    </dependency>


    <!--  SpringMVC的jar包   -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-webmvc</artifactId>
      <!--  引用 上面自定义的常量 -->
      <version>${org.springframework.version}</version>
    </dependency>

    <!--   oxm   -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-oxm</artifactId>
      <version>${org.springframework.version}</version>
    </dependency>

    <!--   jdbc   -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-jdbc</artifactId>
      <version>${org.springframework.version}</version>
    </dependency>


    <!--   tx   -->
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-tx</artifactId>
      <version>${org.springframework.version}</version>
    </dependency>


    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-test</artifactId>
      <version>${org.springframework.version}</version>
    </dependency>


    <!--  用于aop  -->
    <dependency>
      <groupId>org.aspectj</groupId>
      <artifactId>aspectjweaver</artifactId>
      <version>1.7.3</version>
    </dependency>

    <!--  mybatis和spring集成的jar包  -->
    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis-spring</artifactId>
      <version>${org.mybatis.spring.version}</version>
    </dependency>


    <!--   mybatis  -->
    <dependency>
      <groupId>org.mybatis</groupId>
      <artifactId>mybatis</artifactId>
      <version>${org.mybatis.version}</version>
    </dependency>

    <!--  aop用的jar包 -->
    <dependency>
      <groupId>org.aspectj</groupId>
      <artifactId>aspectjrt</artifactId>
      <version>1.6.11</version>
    </dependency>

    <!--  json序列化和反序列化用到的   -->
    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-mapper-asl</artifactId>
      <version>1.9.12</version>
    </dependency>

    <!--  连接池 -->
    <dependency>
      <groupId>commons-dbcp</groupId>
      <artifactId>commons-dbcp</artifactId>
      <version>1.4</version>
      <!--<scope>runtime</scope>-->
    </dependency>


    <!--   日志jar   -->
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>1.1.2</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-core</artifactId>
      <version>1.1.2</version>
      <scope>compile</scope>
    </dependency>


    <!--  mysql的驱动  -->
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>5.1.6</version>
    </dependency>

    <!--  guava  提供了丰富的工具类和数据结构  -->
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>20.0</version>
    </dependency>


    <!--  apache的工具类    -->
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
      <version>3.5</version>
    </dependency>


    <!--  集合工具类   -->
    <dependency>
      <groupId>commons-collections</groupId>
      <artifactId>commons-collections</artifactId>
      <version>3.2.1</version>
    </dependency>


    <!--  单元测试的工具类  -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.12</version>
      <!--<scope>test</scope>-->
    </dependency>

    <!-- 时间处理的jar包   -->
    <dependency>
      <groupId>joda-time</groupId>
      <artifactId>joda-time</artifactId>
      <version>2.3</version>
    </dependency>


    <!-- id加密解密  后面还会讲  -->
    <dependency>
      <groupId>org.hashids</groupId>
      <artifactId>hashids</artifactId>
      <version>1.0.1</version>
    </dependency>


    <!-- ftpclient   上传ftp服务器的jar包  -->
    <dependency>
      <groupId>commons-net</groupId>
      <artifactId>commons-net</artifactId>
      <version>3.1</version>
    </dependency>

    <!-- file upload  上传文件用到的jar包   springmvc上传过来的文件     -->
    <!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload -->
    <dependency>
      <groupId>commons-fileupload</groupId>
      <artifactId>commons-fileupload</artifactId>
      <version>1.2.2</version>
    </dependency>
<!--和上面的是一起的-->
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <version>2.0.1</version>
    </dependency>




    <!--  mybatis pager    3个mybatis分页插件的jar包   dao层有mybatis的三剑客
          1 分页插件    2  生成持久层dao的xml文件  dao层接口的工具   3 idea的插件
    -->

    <dependency>
      <groupId>com.github.pagehelper</groupId>
      <artifactId>pagehelper</artifactId>
      <version>4.1.0</version>
    </dependency>

    <dependency>
      <groupId>com.github.miemiedev</groupId>
      <artifactId>mybatis-paginator</artifactId>
      <version>1.2.17</version>
    </dependency>

    <dependency>
      <groupId>com.github.jsqlparser</groupId>
      <artifactId>jsqlparser</artifactId>
      <version>0.9.4</version>
    </dependency>


    <!-- alipay    集成支付宝的jar包  还需要集成本地的jar    下面的都是支付用到的jar
         alipay 的公共依赖本来是依赖jar包的  还是依赖pom文件好了  但是jar包的版本必须一致
    -->
    <dependency>
      <groupId>commons-codec</groupId>
      <artifactId>commons-codec</artifactId>
      <version>1.10</version>
    </dependency>
    <dependency>
      <groupId>commons-configuration</groupId>
      <artifactId>commons-configuration</artifactId>
      <version>1.10</version>
    </dependency>
    <dependency>
      <groupId>commons-lang</groupId>
      <artifactId>commons-lang</artifactId>
      <version>2.6</version>
    </dependency>
    <dependency>
      <groupId>commons-logging</groupId>
      <artifactId>commons-logging</artifactId>
      <version>1.1.1</version>
    </dependency>
    <dependency>
      <groupId>com.google.zxing</groupId>
      <artifactId>core</artifactId>
      <version>2.1</version>
    </dependency>
    <dependency>
      <groupId>com.google.code.gson</groupId>
      <artifactId>gson</artifactId>
      <version>2.3.1</version>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-core</artifactId>
      <version>1.3</version>
    </dependency>

    <dependency>
      <groupId>redis.clients</groupId>
      <artifactId>jedis</artifactId>
      <version>2.9.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpclient</artifactId>
      <version>4.4.1</version>
    </dependency>


    <!--
           引入一个jads 教教大家怎么配置
           http://search.maven.org/    搜索jedis     找到redis clients
           <dependency>
              <groupId>redis.clients</groupId>
              <artifactId>jedis</artifactId>
              <version>2.9.0</version>
          </dependency>

          <dependency>
            <groupId>com.redislabs</groupId>
            <artifactId>jedis</artifactId>
            <version>3.0.0-m1</version>
          </dependency>


          这个配置文件是我们平时一点点放进去的  不是yi一下子就放入的
      -->


  </dependencies>


  <build>
    <!--   和项目名一致  -->
    <finalName>HealthMail3</finalName>
    <plugins>
      <plugin>
        <!--  mybatis三剑客中一个   生成generator插件  他会根据我们数据库的数据结构生成dao层文件  我们在改改就好了  -->
        <groupId>org.mybatis.generator</groupId>
        <artifactId>mybatis-generator-maven-plugin</artifactId>
        <version>1.3.2</version>
        <configuration>
          <verbose>true</verbose>
          <overwrite>true</overwrite>
        </configuration>
      </plugin>

      <!--   这个配置非常非常的重要  不配置本地跑没问题 发布到服务器上就  找不到jar包了     -->
      <!-- geelynote maven的核心插件之-complier插件默认只支持编译Java 1.4，因此需要加上支持高版本jre的配置，在pom.xml里面加上 增加编译插件 -->
      <plugin>
        <!--   maven  插件  -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <!--  jdk 1.8 -->
          <source>1.8</source>
          <!--  jdk 1.8 -->
          <target>1.8</target>
          <encoding>UTF-8</encoding>
          <!--   配置项目的目录  支付宝的jar包我们就放到这个目录下面    主要是针对发布版  本地不配置也没事  非常重要
                 中央仓库是没有支付宝的jar包的
                 这个配置可以让我们找到工程下面的jar包
                 compilerArguments  这个插件是要自己配置的
            -->
          <compilerArguments>
            <!--非常重要  ${project.basedir}  指工程名HealthMail3  支付宝的jar在这里引入
                支付宝的jar中央仓库没有
              -->
            <extdirs>${project.basedir}/src/main/webapp/WEB-INF/lib</extdirs>
          </compilerArguments>
        </configuration>
      </plugin>
    </plugins>

  </build>


</project>
